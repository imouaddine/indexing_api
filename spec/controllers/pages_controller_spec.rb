require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PagesController, type: :controller do

  let(:url) { CGI::escape(Faker::Internet.url) }
  let(:content ) {
    {
      h1: [],
      h3: "something",
      h2: "hello",
      urls: [],
    }
  }

  let(:valid_attributes) {
    { url: url }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PagesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before do
    allow_any_instance_of(Parser).to receive(:parse).and_return(content)
  end

  describe "GET #index" do
    it "returns successful response" do
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end

    it "return url and content of all pages" do
      page1 = FactoryGirl.create(:page, :with_content)
      page2 = FactoryGirl.create(:page, :with_content)

      get :index, params: {}, session: valid_session
      page_response = json.first
      expect(page_response[:url]).to eq(CGI.unescape(page1.url))
      expect(page_response[:content]).to eq(page1.content.symbolize_keys)

      page_response = json.last
      expect(page_response[:url]).to eq(CGI.unescape(page2.url))
      expect(page_response[:content].symbolize_keys).to eq(page2.content.symbolize_keys)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Page" do
        expect {
          post :create, params: valid_attributes, session: valid_session
        }.to change(Page, :count).by(1)
      end

      it "returns a successful response" do
        post :create, params: valid_attributes, session: valid_session

        expect(response).to be_success
      end

      it 'saves url and content of the sent url page' do
        post :create, params: valid_attributes, session: valid_session

        expect(Page.last.content.symbolize_keys).to eq(content)
        expect(Page.last.url).to eq(CGI.unescape(url))
      end
    end

    context "with invalid params" do
      context 'url is blank' do
        it 'returns an error' do
          post :create, params: { url: ''}, session: valid_session

          expect(json[:errors]).to eq "Url can't be blank"
          expect(response).to have_http_status(:unprocessable_entity)
        end
      end

      context 'url is missing' do
        it 'returns an error' do
          post :create, params: {}, session: valid_session

          expect(json[:errors]).to eq "Url can't be blank"
          expect(response).to have_http_status(:unprocessable_entity)
        end
      end
    end
  end
end
